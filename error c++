To convert the provided Python Tkinter-based application to C++ with the Qt framework, you need to create a similar graphical application using Qt's functionalities. Below is a translation of the functionality into a Qt-based C++ application. Note that Qt does not have a direct equivalent to Tkinterâ€™s `Canvas`, so we use `QGraphicsView` and `QGraphicsScene` for drawing.

Here's how you can translate the Python Tkinter application into C++ using Qt:

### 1. Set up Qt Environment
Ensure you have Qt installed and set up in your development environment. You can use Qt Creator or set up a build system with CMake.

### 2. Define Your Classes

Create the following classes:
- `MainWindow`: Main window for your application.
- `GraphicsView`: Custom view class for handling drawing and interaction.
- `ImageItem`: A custom QGraphicsItem to represent images.

### 3. Implement Your Application

Below is a complete implementation of the application. This example demonstrates the basic functionality and can be expanded to include features such as resizing or rotating objects.

#### `main.cpp`

```cpp
#include <QApplication>
#include "MainWindow.h"

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);

    MainWindow mainWindow;
    mainWindow.show();

    return app.exec();
}
```

#### `MainWindow.h`

```cpp
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QGraphicsScene>
#include <QGraphicsView>
#include <QGraphicsRectItem>
#include <QGraphicsPixmapItem>
#include <QPushButton>
#include <QVBoxLayout>
#include <QListWidget>
#include <QLineEdit>
#include <QColorDialog>
#include <QFileDialog>
#include <QMessageBox>

class MainWindow : public QMainWindow {
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    
private slots:
    void addObject();
    void chooseColor();
    void updateObjectHierarchy();
    void selectObject(QGraphicsItem *item);
    void createScene();
    void renameScene();
    void deleteScene();
    void selectScene();
    
private:
    QGraphicsScene *scene;
    QGraphicsView *view;
    QPushButton *addObjectButton;
    QPushButton *chooseColorButton;
    QLineEdit *objectNameEdit;
    QLineEdit *objectXEdit;
    QLineEdit *objectYEdit;
    QLineEdit *objectWidthEdit;
    QLineEdit *objectHeightEdit;
    QLineEdit *objectSpeedEdit;
    QColor objectColor;
    QListWidget *sceneListWidget;
    QListWidget *objectListWidget;

    QMap<QString, QList<QGraphicsItem*>> scenes;
    QString currentScene;
    QGraphicsItem *selectedItem;
};

#endif // MAINWINDOW_H
```

#### `MainWindow.cpp`

```cpp
#include "MainWindow.h"

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), selectedItem(nullptr) {

    QWidget *centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);

    QVBoxLayout *layout = new QVBoxLayout(centralWidget);

    scene = new QGraphicsScene(this);
    view = new QGraphicsView(scene, this);
    layout->addWidget(view);

    addObjectButton = new QPushButton("Add Object", this);
    connect(addObjectButton, &QPushButton::clicked, this, &MainWindow::addObject);
    layout->addWidget(addObjectButton);

    chooseColorButton = new QPushButton("Choose Color", this);
    connect(chooseColorButton, &QPushButton::clicked, this, &MainWindow::chooseColor);
    layout->addWidget(chooseColorButton);

    objectNameEdit = new QLineEdit(this);
    objectXEdit = new QLineEdit(this);
    objectYEdit = new QLineEdit(this);
    objectWidthEdit = new QLineEdit(this);
    objectHeightEdit = new QLineEdit(this);
    objectSpeedEdit = new QLineEdit(this);

    layout->addWidget(objectNameEdit);
    layout->addWidget(objectXEdit);
    layout->addWidget(objectYEdit);
    layout->addWidget(objectWidthEdit);
    layout->addWidget(objectHeightEdit);
    layout->addWidget(objectSpeedEdit);

    sceneListWidget = new QListWidget(this);
    layout->addWidget(sceneListWidget);
    connect(sceneListWidget, &QListWidget::itemSelectionChanged, this, &MainWindow::selectScene);

    objectListWidget = new QListWidget(this);
    layout->addWidget(objectListWidget);

    // Example usage
    createScene();
}

void MainWindow::addObject() {
    bool ok;
    QString type = QInputDialog::getItem(this, "Object Type", "Select Object Type:", {"rect", "image"}, 0, false, &ok);

    if (!ok) return;

    if (type == "rect") {
        int x = QInputDialog::getInt(this, "X Position", "Enter X Position:", 0, 0, 10000, 1, &ok);
        int y = QInputDialog::getInt(this, "Y Position", "Enter Y Position:", 0, 0, 10000, 1, &ok);
        int width = QInputDialog::getInt(this, "Width", "Enter Width:", 1, 1, 10000, 1, &ok);
        int height = QInputDialog::getInt(this, "Height", "Enter Height:", 1, 1, 10000, 1, &ok);

        if (!ok) return;

        QGraphicsRectItem *rectItem = new QGraphicsRectItem(x, y, width, height);
        rectItem->setBrush(objectColor);
        scene->addItem(rectItem);
    } else if (type == "image") {
        QString filePath = QFileDialog::getOpenFileName(this, "Select Image File");
        if (filePath.isEmpty()) return;

        int x = QInputDialog::getInt(this, "X Position", "Enter X Position:", 0, 0, 10000, 1, &ok);
        int y = QInputDialog::getInt(this, "Y Position", "Enter Y Position:", 0, 0, 10000, 1, &ok);
        int width = QInputDialog::getInt(this, "Width", "Enter Width:", 1, 1, 10000, 1, &ok);
        int height = QInputDialog::getInt(this, "Height", "Enter Height:", 1, 1, 10000, 1, &ok);

        if (!ok) return;

        QPixmap pixmap(filePath);
        pixmap = pixmap.scaled(width, height);
        QGraphicsPixmapItem *pixmapItem = new QGraphicsPixmapItem(pixmap);
        pixmapItem->setPos(x, y);
        scene->addItem(pixmapItem);
    }

    updateObjectHierarchy();
}

void MainWindow::chooseColor() {
    QColor color = QColorDialog::getColor(Qt::black, this);
    if (color.isValid()) {
        objectColor = color;
    }
}

void MainWindow::updateObjectHierarchy() {
    objectListWidget->clear();
    if (currentScene.isEmpty()) return;

    for (auto item : scenes[currentScene]) {
        QString desc;
        if (QGraphicsRectItem *rectItem = dynamic_cast<QGraphicsRectItem*>(item)) {
            desc = QString("Rect at (%1, %2)").arg(rectItem->x()).arg(rectItem->y());
        } else if (QGraphicsPixmapItem *pixmapItem = dynamic_cast<QGraphicsPixmapItem*>(item)) {
            desc = QString("Image at (%1, %2)").arg(pixmapItem->x()).arg(pixmapItem->y());
        }
        objectListWidget->addItem(desc);
    }
}

void MainWindow::selectObject(QGraphicsItem *item) {
    selectedItem = item;
    // Update object properties here
}

void MainWindow::createScene() {
    QString sceneName = QInputDialog::getText(this, "Create Scene", "Enter Scene Name:");
    if (sceneName.isEmpty()) return;

    scenes[sceneName] = QList<QGraphicsItem*>();
    currentScene = sceneName;
    sceneListWidget->addItem(sceneName);
    selectScene();
}

void MainWindow::renameScene() {
    if (currentScene.isEmpty()) {
        QMessageBox::warning(this, "No Scene Selected", "No scene is currently selected.");
        return;
    }

    QString newName = QInputDialog::getText(this, "Rename Scene", "Enter New Scene Name:");
    if (newName.isEmpty()) return;

    if (scenes.contains(newName)) {
        QMessageBox::warning(this, "Duplicate Scene Name", "Scene name already exists.");
        return;
    }

    scenes[newName] = scenes.take(currentScene);
    currentScene = newName;
    sceneListWidget->clear();
    for (const QString &name : scenes.keys()) {
        sceneListWidget->addItem(name);
    }
    selectScene();
}

void MainWindow::deleteScene() {
    if (currentScene.isEmpty()) {
        QMessageBox::warning(this, "No Scene Selected", "No scene is currently selected.");
        return;
    }

    if (QMessageBox::question(this, "Delete Scene", QString("Are you sure you want to delete the scene '%1'?").arg(currentScene)) == QMessageBox::Yes) {
        scenes.remove(currentScene);
        sceneListWidget->clear();
        for (const QString &name : scenes.keys()) {
            sceneListWidget->addItem(name

);
        }
        currentScene.clear();
        scene->clear();
        updateObjectHierarchy();
    }
}

void MainWindow::selectScene() {
    QListWidgetItem *selectedItem = sceneListWidget->currentItem();
    if (selectedItem) {
        currentScene = selectedItem->text();
        scene->clear();
        for (QGraphicsItem *item : scenes[currentScene]) {
            scene->addItem(item);
        }
        updateObjectHierarchy();
    }
}
```

#### `ImageItem.h`

```cpp
#ifndef IMAGEITEM_H
#define IMAGEITEM_H

#include <QGraphicsPixmapItem>
#include <QPixmap>

class ImageItem : public QGraphicsPixmapItem {
public:
    ImageItem(const QPixmap &pixmap, QGraphicsItem *parent = nullptr)
        : QGraphicsPixmapItem(pixmap, parent) {}
};

#endif // IMAGEITEM_H
```

### Explanation

1. **`MainWindow` Class**: Contains the core UI elements, including buttons for adding objects, a color chooser, and methods for managing scenes and objects.
2. **`GraphicsView` and `QGraphicsScene`**: Used for drawing and interacting with graphics. The scene holds the graphics items, and the view displays them.
3. **`ImageItem` Class**: A custom class to handle image items, if you need special handling.

**Compiling**: To compile, you need a `CMakeLists.txt` file or a `.pro` file for Qt Creator. Ensure all required Qt modules are linked.

This example provides a basic structure. You can add more features like collision detection, resizing, and rotation based on the requirements and extend the implementation accordingly.
